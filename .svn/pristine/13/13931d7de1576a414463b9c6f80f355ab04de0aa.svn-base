using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Cors;
using DMSApi.Models;
using DMSApi.Models.IRepository;
using DMSApi.Models.Repository;

namespace DMSApi.Controllers
{
    [EnableCors(origins: "*", headers: "*", methods: "*")]
    public class CurrencyController : ApiController
    {
        private ICurrencyRepository currencyRepository;

        public CurrencyController()
        {
            this.currencyRepository = new CurrencyRepository();
        }

        public CurrencyController(ICurrencyRepository currencyRepository)
        {
            this.currencyRepository = currencyRepository;
        }

        public HttpResponseMessage GetAllCurrency()
        {
            var data = currencyRepository.GetAllCurrency();
            var formatter = RequestFormat.JsonFormaterString();
            return Request.CreateResponse(HttpStatusCode.OK, data, formatter);
        }

        [System.Web.Http.HttpPost]
        public HttpResponseMessage Post([FromBody] Models.currency currency)
        {

            try
            {
                if (string.IsNullOrEmpty(currency.currency_name))
                {
                    var formatter = RequestFormat.JsonFormaterString();
                    return Request.CreateResponse(HttpStatusCode.OK, new Confirmation { output = "error", msg = "Currency is Empty" }, formatter);

                }
                else
                {
                    if (currencyRepository.CheckDuplicateCurrency(currency.currency_name))
                    {
                        var formatter = RequestFormat.JsonFormaterString();
                        return Request.CreateResponse(HttpStatusCode.OK, new Confirmation { output = "error", msg = "Currency Already Exists" }, formatter);
                    }
                    else
                    {
                        currency insert_currency = new currency
                        {
                            currency_name = currency.currency_name

                        };

                        currencyRepository.AddCurrency(insert_currency);
                        var formatter = RequestFormat.JsonFormaterString();
                        return Request.CreateResponse(HttpStatusCode.OK, new Confirmation { output = "success", msg = "Currency save successfully" }, formatter);
                    }

                }


            }
            catch (Exception ex)
            {
                var formatter = RequestFormat.JsonFormaterString();
                return Request.CreateResponse(HttpStatusCode.OK, new Confirmation { output = "error", msg = ex.ToString() }, formatter);
            }
        }

        [System.Web.Http.HttpPut]
        public HttpResponseMessage Put([FromBody] Models.currency currency)
        {
            try
            {

                Models.currency updateCurrency = new Models.currency
                {
                    currency_id = currency.currency_id,
                    currency_name = currency.currency_name

                };

                currencyRepository.EditCurrency(updateCurrency);
                var formatter = RequestFormat.JsonFormaterString();
                return Request.CreateResponse(HttpStatusCode.OK, new Confirmation { output = "success", msg = "Currency update successfully" }, formatter);


            }
            catch (Exception ex)
            {
                var formatter = RequestFormat.JsonFormaterString();
                return Request.CreateResponse(HttpStatusCode.OK, new Confirmation { output = "error", msg = ex.ToString() }, formatter);
            }
        }


        [System.Web.Http.HttpDelete]
        public HttpResponseMessage Delete([FromBody]Models.currency currency)
        {
            try
            {
                //long con_id = long.Parse(country_id);
                bool deleteCurrency = currencyRepository.DeleteCurrency(currency.currency_id);

                var formatter = RequestFormat.JsonFormaterString();
                return Request.CreateResponse(HttpStatusCode.OK, new Confirmation { output = "success", msg = "Currency Delete Successfully." }, formatter);
            }
            catch (Exception ex)
            {
                var formatter = RequestFormat.JsonFormaterString();
                return Request.CreateResponse(HttpStatusCode.OK, new Confirmation { output = "error", msg = ex.ToString() }, formatter);
            }

        }

        [ActionName("GetCurrencyById")]
        [System.Web.Http.HttpPost]
        public HttpResponseMessage GetCurrencyById([FromBody]Models.currency currency)
        {
            var currencyId = currency.currency_id;

            var data = currencyRepository.GetCurrencyById(currencyId);
            HttpResponseMessage response = Request.CreateResponse(HttpStatusCode.OK, data);
            return response;
        }
    }
}